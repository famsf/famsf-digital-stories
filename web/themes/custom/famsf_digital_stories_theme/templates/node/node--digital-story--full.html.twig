{#
/**
 * @file
 * Theme override to display a digital story node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 */
#}
{% set classes = [
logged_in? 'admin__article'
] %}
<article{{ attributes.addClass(classes) }}>

    {{ title_prefix }}
    {% if not page %}
        <h2{{ title_attributes }}>
            <a href="{{ url }}" rel="bookmark">{{ label }}</a>
        </h2>
    {% endif %}
    {{ title_suffix }}

    {% if display_submitted %}
        <footer>
            {{ author_picture }}
            <div{{ author_attributes }}>
                {% trans %}Submitted by {{ author_name }} on {{ date }}{% endtrans %}
                {{ metadata }}
            </div>
        </footer>
    {% endif %}
    <section class="js-section pp-scrollable" id="start">
        <div class="site-hero" {% if node.field_site_hero_background_image.value is not empty %}data-bg="{{ file_url(node.field_site_hero_background_image.entity.fileuri) }}" {% endif %}>
            <div class="site-hero__title has-solid-rectangles top-left">
                <div class="js-section-hero--get_height">
                    {% if node.field_theme.value starts with 'legion' %}
                    <span class="site-hero__logo animated fadeIn delay-1500"><a href="#">Legion of Honor Museum</a></span>
                    {% endif %}
                    <h1 class="animated fadeIn delay-1500"> {{ label }}</h1>
                    <h2 class="animated fadeIn delay-1500">{{ node.field_exhibition_dates.value }}</h2>
                </div>
                <div class="site-hero__rectangle top animated fadeInLeft delay-250 js-section-hero--set_height"></div>
                <div class="site-hero__rectangle bottom animated fadeInRight delay-250 js-section-hero--set_height"></div>
            </div>
        </div>
        <button class="js-next-page next-page animated fadeIn delay-100">
            <div class="icon--med">
                <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg"
                     xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 29.2 27"
                     style="enable-background:new 0 0 29.2 27;" xml:space="preserve">
    <path d="M14.6,27c-0.3,0-0.5-0.1-0.7-0.3L0.3,13.6c-0.3-0.3-0.4-0.7-0.2-1.1c0.2-0.4,0.5-0.6,0.9-0.6h6.8V1
      c0-0.6,0.4-1,1-1h11.5c0.6,0,1,0.4,1,1v10.9h6.8c0.4,0,0.8,0.2,0.9,0.6s0.1,0.8-0.2,1.1L15.3,26.7C15.1,26.9,14.8,27,14.6,27z
       M3.5,13.9l11.1,10.7l11.1-10.7h-5.3c-0.6,0-1-0.4-1-1V2H9.8v10.9c0,0.6-0.4,1-1,1H3.5z"></path>
    </svg>
            </div>
        next page
        </button>
    </section>
    {{ content.field_section }}
</article>
